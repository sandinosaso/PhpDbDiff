<?php

/**
 * Compare the schemas of between databases.
 * 
 * For two database schemas to be considered the same, they must have the same
 * tables, where each table has the same fields, and each field has the same
 * parameters.
 * 
 * Field parameters that are compared are those that are given by the MySQL
 * 'SHOW COLUMNS' command. These are: the field's name, it's type, whether the
 * field can store null values, whether the column is indexed, the default
 * values and whether the field was created with the 'auto_increment' keyword.
 * 
 * More information on this tool can be found at:
 * http://joefreeman.co.uk/blog/2009/07/php-script-to-compare-mysql-database-schemas/
 * 
 * Copyright (C) 2009, Joe Freeman <joe.freeman@bitroot.com>
 * Available under http://en.wikipedia.org/wiki/MIT_License
 * 
 * Copyright (C) 2013, Sandino Nunez <sandinosaso@gmail.com>
 * Added the posibililty of generate sql to perform a transformation between an
 * old database schema and a new one. The compare tools ramains the same.
 * 
 * Available under http://en.wikipedia.org/wiki/MIT_License
 * 
 * @package default
 * @author Joe Freeman
 */
class DbDiff {
    public static $schema1_name;
    public static $schema2_name;
	/**
	 * Export the schema of the database into an array.
	 *
	 * @param string $config Config details for the database connection.
	 * @param string $name Name or description of the database.
	 * @return mixed|string An array structure of the exported schema, or an error string.
	 */
	function export($config, $name) {
		
		$db = @mysql_connect($config['host'], $config['user'],
			$config['password']);
		
		if (!$db) {
			return null;
		}
		
		if (!mysql_select_db($config['name'], $db)) {
			return null;
		}
		
		$result = mysql_query("SHOW TABLES");
		while ($row = mysql_fetch_row($result)) {
			$tables[$row[0]] = array();
		}
		
		foreach ($tables as $table_name => $fields) {
			
			$result = mysql_query("SHOW COLUMNS FROM " . $table_name, $db);
			while ($row = mysql_fetch_assoc($result)) {
				$tables[$table_name][$row['Field']] = $row;
			}
		}
		
		mysql_close();
		
		$data = array(
			'name' => $name,
			'time' => time(),
			'tables' => $tables
		);
		
		return $data;
	}
	
	/**
	 * Compare two schemas (as generated by the 'export' method.)
	 *
	 * @param string $schema1 The first database schema.
	 * @param string $schema2 The second database schema.
	 * @return void
	 */
	function compare($schema1, $schema2) {
		
		$tables1 = array_keys($schema1['tables']);
		$tables2 = array_keys($schema2['tables']);
		
		$tables = array_unique(array_merge($tables1, $tables2));
		
		$results = array();
		
		foreach ($tables as $table_name) {
			
			// Check tables exist in both databases
			
			if (!isset($schema1['tables'][$table_name])) {
				
				$results[$table_name][] = '<em>' . $schema1['name']
					. '</em> is missing table: <code>' . $table_name
					. '</code>.';
				
				continue;
			}
			
			if (!isset($schema2['tables'][$table_name])) {
				
				$results[$table_name][] = '<em>' . $schema2['name']
					. '</em> is missing table: <code>' . $table_name
					. '</code>.';
				
				continue;
			}
			
			// Check fields exist in both tables
			
			$fields = array_merge($schema1['tables'][$table_name],
				$schema2['tables'][$table_name]);
			
			foreach ($fields as $field_name => $field) {
				
				if (!isset($schema1['tables'][$table_name][$field_name])) {
					
					$results[$table_name][] = '<em>' . $schema1['name']
						. '</em> is missing field: <code>' . $field_name
						. '</code>';
					
					continue;
				}
				
				if (!isset($schema2['tables'][$table_name][$field_name])) {
					
					$results[$table_name][] = '<em>' . $schema2['name']
						. '</em> is missing field: <code>' . $field_name
						. '</code>';
					
					continue;
				}
				
				// Check that the specific parameters of the fields match
				
				$s1_params = $schema1['tables'][$table_name][$field_name];
				$s2_params = $schema2['tables'][$table_name][$field_name];
				
				foreach ($s1_params as $name => $details) {
					if ($s1_params[$name] != $s2_params[$name]) {
						$results[$table_name][] = 'Field <code>' . $field_name
							. '</code> differs between databases for parameter \''
							. $name . '\'. <em>' . $schema1['name']
							. '</em> has \'' . $s1_params[$name]
							. '\' and <em>' . $schema2['name']
							. '</em> has \'' . $s2_params[$name] . '\'.';
					}
				}
			}
		}
		
		return $results;
	}

	/**
	 * Compare two schemas (as generated by the 'export' method.)
	 *
	 * @param string $schema1 The first database schema.
	 * @param string $schema2 The second database schema (the newest)
	 * @return void
	 */
	function generateSQL($schema1, $schema2) {
		
		$tables1 = array_keys($schema1['tables']);
		$tables2 = array_keys($schema2['tables']);
		
		$tables = array_unique(array_merge($tables1, $tables2));
		
		$results = array();
		
		foreach ($tables as $table_name) {
			
			// Check tables exist in both databases
			
			if (!isset($schema1['tables'][$table_name])) {
				
				$results[$table_name][] = '<em>' . $schema1['name']
					. '</em> is missing table: <code>' . $table_name
					. '</code>.';
				
				continue;
			}

			if (!isset($schema2['tables'][$table_name])) {
				
				$results[$table_name][] = '<em>' . $schema2['name']
					. '</em> is missing table: <code>' . $table_name
					. '</code>.';
				
				continue;
			}
			
						
			// Check fields exist in both tables
			
			$fields = array_merge($schema1['tables'][$table_name],$schema2['tables'][$table_name]);
			
			foreach ($fields as $field_name => $field) {
				
				//Siempre va el resumen despues los alters
				$fields_changed[$field_name] = false;

				if (!isset($schema1['tables'][$table_name][$field_name])) {
					//New schema does not have this field, so DROP it from old schema

					$results[$table_name][] = "<br />ALTER TABLE `$table_name` DROP `$field_name`;";
					
					continue;
				}


				if (!isset($schema2['tables'][$table_name][$field_name])) {
					//New schema does have a new field, so ADD it to from old schema

					$Type    = $schema1['tables'][$table_name][$field_name]['Type'];
					$Null    = $schema1['tables'][$table_name][$field_name]['Null'];
					$Key  	 = $schema1['tables'][$table_name][$field_name]['Key'];
					$Default = $schema1['tables'][$table_name][$field_name]['Default'];
					$Extra   = $schema1['tables'][$table_name][$field_name]['Extra'];

					if ($Key != ''){
						//Un valor de PRI indica que el campo es parte de una clave primaria de tabla.
						//UNI indica que el campo es parte de un índice UNIQUE. 
						//El valor MUL indica que se permiten múltiples ocurrencias de un valor dado dentro del campo
		
						if($Key == 'PRI')
							$results[$table_name][] = "<br />ALTER TABLE `$table_name` DROP PRIMARY KEY, ADD PRIMARY KEY(`".$field_name."`);";							
						elseif($Key == 'MUL')
							$results[$table_name][] = "<br />ALTER TABLE `$table_name` ADD INDEX (`".$field_name."`);";
						elseif($Key == 'UNI')
							$results[$table_name][] = "<br />ALTER TABLE `$table_name` ADD UNIQUE (`".$field_name."`);"; 				
					}

					$results[$table_name][] = "<br />ALTER TABLE `$table_name` ADD `$field_name`";					

					$results[$table_name][] .= " $Type ";

					if ($Null == 'NO')
						$results[$table_name][] .=  " NOT NULL";
					else
						$results[$table_name][] .=  " NULL";

					if ($Default != '')
						$results[$table_name][] .=  " DEFAULT " . $Default;

					$results[$table_name][] .= " $Extra;";
			
					continue;
				}				
				
				
				// Check that the specific parameters of the fields match				
				$s1_params = $schema1['tables'][$table_name][$field_name];
				$s2_params = $schema2['tables'][$table_name][$field_name];
				
				foreach ($s1_params as $name => $details) {
					//In $name we have ('Field','Type','Null','Key','Default', 'Extra')
					if ($s1_params[$name] != $s2_params[$name]) {						
						$fields_changed[$field_name] = true;
					}
				}


				
				if (!isset($schema2['tables'][$table_name][$field_name])) {	
					//The field does not exists maybe it is different

					$Type    = $schema1['tables'][$table_name][$field_name]['Type'];
					$Null    = $schema1['tables'][$table_name][$field_name]['Null'];
					$Key  	 = $schema1['tables'][$table_name][$field_name]['Key'];
					$Default = $schema1['tables'][$table_name][$field_name]['Default'];
					$Extra   = $schema1['tables'][$table_name][$field_name]['Extra'];


					if ($Key != ''){
						//Un valor de PRI indica que el campo es parte de una clave primaria de tabla.
						//UNI indica que el campo es parte de un índice UNIQUE. 
						//El valor MUL indica que se permiten múltiples ocurrencias de un valor dado dentro del campo
		
						if($Key == 'PRI')
							$results[$table_name][] = "<br />ALTER TABLE `$table_name` ADD PRIMARY KEY(`".$field_name."`);";							
						elseif($Key == 'MUL')
							$results[$table_name][] = "<br />ALTER TABLE `$table_name` ADD INDEX (`".$field_name."`);";
						elseif($Key == 'UNI')
							$results[$table_name][] = "<br />ALTER TABLE `$table_name` ADD UNIQUE (`".$field_name."`);"; 				
					}

					$results[$table_name][] = "<br />ALTER TABLE `$table_name` ADD `$field_name`";					

					$results[$table_name][] .= " $Type ";

					if ($Null == 'NO')
						$results[$table_name][] .=  " NOT NULL";
					else
						$results[$table_name][] .=  " NULL";

					if ($Default != '')
						$results[$table_name][] .=  " DEFAULT " . $Default;

					$results[$table_name][] .= " $Extra;";

					$results[$table_name][] .= "<br />";
					
					continue;
				}else{	
					//The field exists maybe it is different

					if ($fields_changed[$field_name]){

						$Type    = $schema1['tables'][$table_name][$field_name]['Type'];
						$Null    = $schema1['tables'][$table_name][$field_name]['Null'];
						$Key  	 = $schema1['tables'][$table_name][$field_name]['Key'];
						$Default = $schema1['tables'][$table_name][$field_name]['Default'];
						$Extra   = $schema1['tables'][$table_name][$field_name]['Extra'];


						if ($Key != ''){
							//Un valor de PRI indica que el campo es parte de una clave primaria de tabla.
							//UNI indica que el campo es parte de un índice UNIQUE. 
							//El valor MUL indica que se permiten múltiples ocurrencias de un valor dado dentro del campo
			
							if($Key == 'PRI')
								$results[$table_name][] = "<br />ALTER TABLE $table_name DROP PRIMARY KEY, ADD PRIMARY KEY(`".$field_name."`);";							
							elseif($Key == 'MUL')
								$results[$table_name][] = "<br />ALTER TABLE $table_name ADD INDEX (`".$field_name."`);";
							elseif($Key == 'UNI')
								$results[$table_name][] = "<br />ALTER TABLE $table_name ADD UNIQUE (`".$field_name."`);"; 				
						}

						$results[$table_name][] = "<br />ALTER TABLE `$table_name` CHANGE `$field_name` `$field_name` ";					

						$results[$table_name][] .= " $Type ";

						if ($Null == 'NO')
							$results[$table_name][] .=  " NOT NULL";
						else
							$results[$table_name][] .=  " NULL";

						if ($Default != '')
							$results[$table_name][] .=  " DEFAULT " . $Default;

						$results[$table_name][] .= " $Extra;";

						$results[$table_name][] .= "<br />";
						
						continue;				

					}
					
					
				}
				
				
			}
		}
		
		return $results;
	}

	
	//Pavada
}

?>